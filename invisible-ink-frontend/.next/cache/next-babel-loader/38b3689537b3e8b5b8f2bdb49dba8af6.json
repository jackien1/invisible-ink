{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as types from '../types';\nconst INITIAL_STATE = {\n  page: '~',\n  user: {},\n  isAuthenticated: false,\n  loading: false,\n  error: ''\n};\nexport default function (state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case types.SET_CURRENT_USER:\n      {\n        return _objectSpread({}, state, {\n          isAuthenticated: !(Object.keys(action.payload).length === 0 && action.payload.constructor === Object),\n          user: action.payload,\n          loading: false\n        });\n      }\n\n    case types.GET_LOADING:\n      {\n        return _objectSpread({}, state, {\n          loading: true,\n          error: ''\n        });\n      }\n\n    case types.CHANGE_PAGE:\n      {\n        console.log('Changed page to ' + action.payload);\n        return _objectSpread({}, state, {\n          page: action.payload\n        });\n      }\n\n    case types.GET_ERRORS:\n      {\n        return _objectSpread({}, state, {\n          error: action.payload,\n          loading: false\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/jackieni/dev/hackathon/invisible-ink/invisible-ink-frontend/redux/reducers/auth_reducer.js"],"names":["types","INITIAL_STATE","page","user","isAuthenticated","loading","error","state","action","type","SET_CURRENT_USER","Object","keys","payload","length","constructor","GET_LOADING","CHANGE_PAGE","console","log","GET_ERRORS"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,IAAI,EAAE,GADY;AAElBC,EAAAA,IAAI,EAAE,EAFY;AAGlBC,EAAAA,eAAe,EAAE,KAHC;AAIlBC,EAAAA,OAAO,EAAE,KAJS;AAKlBC,EAAAA,KAAK,EAAE;AALW,CAAtB;AAQA,eAAe,UAASC,KAAK,GAAGN,aAAjB,EAAgCO,MAAhC,EAAwC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,KAAK,CAACU,gBAAX;AAA6B;AACzB,iCACOH,KADP;AAEIH,UAAAA,eAAe,EAAE,EACbO,MAAM,CAACC,IAAP,CAAYJ,MAAM,CAACK,OAAnB,EAA4BC,MAA5B,KAAuC,CAAvC,IACAN,MAAM,CAACK,OAAP,CAAeE,WAAf,KAA+BJ,MAFlB,CAFrB;AAMIR,UAAAA,IAAI,EAAEK,MAAM,CAACK,OANjB;AAOIR,UAAAA,OAAO,EAAE;AAPb;AASH;;AACD,SAAKL,KAAK,CAACgB,WAAX;AAAwB;AACpB,iCAAYT,KAAZ;AAAmBF,UAAAA,OAAO,EAAE,IAA5B;AAAkCC,UAAAA,KAAK,EAAE;AAAzC;AACH;;AACD,SAAKN,KAAK,CAACiB,WAAX;AAAwB;AACpBC,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBX,MAAM,CAACK,OAAxC;AACA,iCAAYN,KAAZ;AAAmBL,UAAAA,IAAI,EAAEM,MAAM,CAACK;AAAhC;AACH;;AACD,SAAKb,KAAK,CAACoB,UAAX;AAAuB;AACnB,iCAAYb,KAAZ;AAAmBD,UAAAA,KAAK,EAAEE,MAAM,CAACK,OAAjC;AAA0CR,UAAAA,OAAO,EAAE;AAAnD;AACH;;AAED;AACI,aAAOE,KAAP;AAxBR;AA0BH","sourcesContent":["import * as types from '../types';\n\nconst INITIAL_STATE = {\n    page: '~',\n    user: {},\n    isAuthenticated: false,\n    loading: false,\n    error: ''\n};\n\nexport default function(state = INITIAL_STATE, action) {\n    switch (action.type) {\n        case types.SET_CURRENT_USER: {\n            return {\n                ...state,\n                isAuthenticated: !(\n                    Object.keys(action.payload).length === 0 &&\n                    action.payload.constructor === Object\n                ),\n                user: action.payload,\n                loading: false\n            };\n        }\n        case types.GET_LOADING: {\n            return { ...state, loading: true, error: '' };\n        }\n        case types.CHANGE_PAGE: {\n            console.log('Changed page to ' + action.payload);\n            return { ...state, page: action.payload };\n        }\n        case types.GET_ERRORS: {\n            return { ...state, error: action.payload, loading: false };\n        }\n\n        default:\n            return state;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}