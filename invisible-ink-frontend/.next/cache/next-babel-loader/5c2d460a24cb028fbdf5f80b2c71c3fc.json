{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as types from '../types';\nconst INITIAL_STATE = {\n  cases: []\n};\nexport default function (state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case types.LOAD_CASES:\n      {\n        return _objectSpread({}, state, {\n          cases: action.payload\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/jackieni/dev/hackathon/invisible-ink/invisible-ink-frontend/redux/reducers/explore_reducer.js"],"names":["types","INITIAL_STATE","cases","state","action","type","LOAD_CASES","payload"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,KAAK,EAAE;AADW,CAAtB;AAIA,eAAe,UAASC,KAAK,GAAGF,aAAjB,EAAgCG,MAAhC,EAAwC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKL,KAAK,CAACM,UAAX;AAAuB;AACnB,iCAAYH,KAAZ;AAAmBD,UAAAA,KAAK,EAAEE,MAAM,CAACG;AAAjC;AACH;;AAED;AACI,aAAOJ,KAAP;AANR;AAQH","sourcesContent":["import * as types from '../types';\n\nconst INITIAL_STATE = {\n    cases: []\n};\n\nexport default function(state = INITIAL_STATE, action) {\n    switch (action.type) {\n        case types.LOAD_CASES: {\n            return { ...state, cases: action.payload };\n        }\n\n        default:\n            return state;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}